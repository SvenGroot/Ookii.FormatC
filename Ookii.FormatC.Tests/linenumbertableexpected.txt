<div class="code"><table><tr><td class="lineNumbers">  1. <br />  2. <br />  3. <br />  4. <br />  5. <br />  6. <br />  7. <br />  8. <br />  9. <br /> 10. <br /> 11. <br /> 12. <br /> 13. <br /> 14. <br /> 15. <br /> 16. <br /> 17. <br /> 18. <br /> 19. <br /> 20. <br /> 21. <br /> 22. <br /> 23. <br /> 24. <br /> 25. <br /> 26. <br /> 27. <br /> 28. <br /> 29. <br /> 30. <br /> 31. <br /> 32. <br /> 33. <br /> 34. <br /> 35. <br /> 36. <br /> 37. <br /> 38. <br /> 39. <br /> 40. <br /> 41. <br /> 42. <br /> 43. <br /> 44. <br /> 45. <br /> 46. </td><td><pre><span class="keyword">using</span> System;
<span class="comment">// A single line comment starting at the beginning of the line</span>
<span class="keyword">using</span> System.IO;
<span class="comment">/* A comment block starting at the beginning of the line */</span>


<span class="keyword">namespace</span> CSharpTest
{
    <span class="comment">// A comment containing what looks like a &quot;string&quot;</span>
    <span class="comment">// A comment containing /* what looks like */ a block comment</span>
    <span class="comment">/* A multiline comment
     * also containing a // regular comment
     * And containing what looks like a &quot;string&quot;
     */</span>

    <span class="keyword">public</span> <span class="keyword">class</span> <span class="type">Program</span>
    {
        <span class="comment">/// &lt;summary&gt;</span>
        <span class="comment">/// An XML comment &lt;see cref=&quot;System.String&quot; /&gt;.</span>
        <span class="comment">/// &lt;/summary&gt;</span>
        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Main()
        {
            <span class="keyword">int</span> Int; <span class="comment">// case sensitive test</span>
            <span class="keyword">int</span> @int; <span class="comment">// escaping test</span>
            <span class="keyword">int</span> from; <span class="comment">// contextual escaping test</span>
            <span class="type">Console</span>.WriteLine(<span class="string">&quot;A string \&quot; \\\&quot; hello \t\\&quot;</span>);
            <span class="type">Console</span>.WriteLine(<span class="string">&quot;A string containing what // looks like a comment.&quot;</span>); <span class="comment">// followed by a real comment</span>
            <span class="type">Console</span>.WriteLine(<span class="string">@&quot;An @ string&quot;&quot; \&quot;</span>); <span class="comment">/* and another comment */</span>
            <span class="type">Console</span>.WriteLine(<span class="string">@&quot;Another @ string &quot;&quot;&quot;&quot;&quot;</span>);
            <span class="type">Console</span>.WriteLine(<span class="string">&quot;{0} {1} {2}&quot;</span>, <span class="string">&quot;more than one\\&quot;</span>, <span class="comment">/* embedded comment */</span> <span class="string">@&quot;string on &quot;&quot;the same&quot;</span>, <span class="string">&quot;line&quot;</span>);
<span class="preprocessor">#if</span> PREPROCESSORTEST
            <span class="keyword">for</span>( <span class="keyword">int</span> x = 0; x &lt; 10; ++x )
            {
                <span class="type">Console</span>.WriteLine(<span class="string">&#39;x&#39;</span>);
                <span class="type">Console</span>.WriteLine(<span class="string">&#39;\&#39;&#39;</span>);
                <span class="type">Console</span>.WriteLine(<span class="string">&#39;\\&#39;</span>);
            }
<span class="preprocessor">#endif</span>
        }

        <span class="keyword">public</span> <span class="keyword">async</span> Task Foo()
        {
            <span class="keyword">await</span> Bar();
        }
    }
}</pre></td></tr></table></div>